locals {
  template_vars = merge(var.template_vars, { auto_warning = "Generated by gen-config-files-from-tf module" })

  // find all $template_in files across all $deployment_root/base folders, to be rendered to
  // $deployment_root/$stack_id/auto-root-$filename
  common_templ_files = [
    for path in var.deployment_roots : [
      for tf_name in fileset(format("%s/_templates_", path), var.template_in) : {
        source = format("%s/_templates_/%s", path, tf_name)
        dest = (
          var.k8s_namespace == "**" ?
          // common to all namespaces:
          format("%s/%s/auto-root-%s", path, var.stack_id, tf_name) :
          // for specific namespace:
          format("%s/%s/%s/auto-root-%s", path, var.stack_id, var.k8s_namespace, tf_name)
        )
      }
    ]
  ]

  // find all $template_in files across all $deployment_root/_templates_/$stack_id/$k8s_namespace
  // folders, to be rendered to $deployment_root/$found_path/auto-$filename
  namespace_templ_files = [
    for path in var.deployment_roots : [
      for tf_name in fileset(format("%s/_templates_", path), "${var.stack_id}/${var.k8s_namespace}/${var.template_in}") : {
        source = format("%s/_templates_/%s", path, tf_name)
        dest   = format("%s/%s/auto-%s", path, dirname(tf_name), basename(tf_name))
      }
    ]
  ]

  // combine the 2 sets into one big map:
  all_templ_files = {
    for tf in flatten([local.common_templ_files, local.namespace_templ_files]) :
    tf.source => tf.dest
  }
}

resource "local_file" "helm_chart_values" {
  for_each = local.all_templ_files
  content = templatefile(
    each.key,
    local.template_vars
  )
  filename        = each.value
  file_permission = "0644"
}
